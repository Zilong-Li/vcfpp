#+title: vcfpp: a C++ API for scripting rapid variant analysis
#+author: Zilong Li
#+language: en
#+options: title:nil toc:nil H:4 author:nil
#+latex_class: minipaper
#+latex_header: \usepackage{xcolor}
#+latex_header: \usepackage{listings}
#+latex_header: \usepackage{caption}
#+latex_header: \usepackage{calc}
#+latex_header: \DeclareCaptionFont{white}{\color{white}}
#+latex_header: \DeclareCaptionFormat{listing}{\parbox{\textwidth}{\colorbox{gray}{\parbox{\textwidth}{#1#2#3}}\vskip-4pt}}
#+latex_header: \captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white}
#+latex_header: \newlength\tdima \newlength\tdimb \setlength\tdima{ \fboxsep+\fboxrule} \setlength\tdimb{-\fboxsep+\fboxrule}
#+latex_header: \lstset{frame=tlrb,xleftmargin=\tdima,xrightmargin=\tdimb, rulecolor=\color{gray}}

#+begin_export latex
\author{Zilong Li
\thanks{Zilong Li: Section for Computational and RNA Biology, Department of Biology, University of Copenhagen. \\
Email: zilong.dk@gamil.com.\\
We thank funding.}}
\begin{titlepage} \maketitle
  We introduce vcfpp, a C++ API of htslib, providing a rapid and
  python-like interface to manipulate VCF/BCF files. Given the
  complexity of the VCF format as well as the diverse variant
  annotations and genotype metadata, there is a need for fast,
  flexible methods enabling intuitive analysis of the variant data
  within VCF and BCF files. We demonstrate an example of how minimal
  vcfpp code can read/write variant records easily. Additionally, we show how
  vcfpp can be interesting to Statisticians working with R. Some useful
  command line tools using vcfpp are also available.
\end{titlepage}
#+end_export

* Introduction

The VCF format (Danecek et al., 2011) is the standard for
representing genetic variation observed in DNA sequencing
studies. The strength of the VCF format is its ability to represent
the location of a variant, the genotype of the sequenced
individual at each locus, as well as extensive variant
metadata. Furthermore, the VCF format provided a substantial advance
for the research community, as it follows a rigorous format
specification that enables direct comparison of results from
multiple studies and facilitates reproducible research. However, the
consequence of this flexibility and the rather complicated
specification of the VCF format, is that researchers require
powerful software libraries to access, query and manipulate variants
from VCF files.

\newpage

* Results

** Python-like interface

In this example, we count the number of heterozygous sites for
each sample in all records. The core is *just 10 lines*.

#+caption: example.cpp
#+attr_latex: :options captionpos=t
#+begin_src C++ -n
vcfpp::BcfReader vcf("vcf.gz"); // read vcf.gz
vcfpp::BcfRecord var(vcf.header); 
vector<char> gt; // genotype can be of bool, char or int type
vector<int> hetsum(vcf.nsamples); // store the het counts
while (vcf.getNextVariant(var)) {
    if (!var.isSNP()) continue; // skip other type of variants
    var.getGenotypes(gt);
    assert(var.nploidy==2); // make sure it is diploidy
    for(int i = 0; i < gt.size() / 2; i++) 
        hetsum[i] += abs(gt[2 * i + 0] - gt[2 * i + 1]);
}
#+end_src

\newpage

** Working with R

Stats like working with R. Rcpp can interact R and C++ seamlessly.

#+caption: vcfpp-r.cpp
#+attr_latex: :options captionpos=t
#+begin_src C++
#include <Rcpp.h>
#include <vcfpp.h>
using namespace Rcpp;
using namespace std;
// [[Rcpp::export]]
List genotype_list(const string & vcffile) {
    vcfpp::BcfReader vcf(vcffile);
    vcfpp::BcfRecord var(vcf.header);
    vector<vector<int>> G;
    vector<int> gt;
    while (vcf.getNextVariant(var)) {
        var.getGenotypes(gt);
        G.push_back(gt);
    }
    return wrap(G);
}
#+end_src

#+caption: Here is the R code
#+attr_latex: :options captionpos=t
#+begin_src R
sourceCpp("vcfpp-r.cpp")
gts <- genotype_list("vcf.gz")
#+end_src

* Discussion

* Local setup :noexport:
Local Variables:
org-latex-listings: t
End:
