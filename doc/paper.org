#+title: vcfpp: a C++ API for scripting rapid variant analysis
#+setupfile: latex.org
#+language: en
#+options: title:nil toc:nil H:4 author:nil
#+bibliography: "ref.bib"

#+begin_export latex
\author{Zilong Li
\thanks{Zilong Li: Section for Computational and RNA Biology, Department of Biology, University of Copenhagen. \\
Email: zilong.dk@gamil.com.}}
\begin{titlepage} \maketitle
  Given the complexity and popularity of the VCF/BCF format as well as
  ever-growing data size, there is always a need for fast and flexible
  methods to manipulate it in different programming languages. Static
  languages like C++ has the superiority of performance as C, and its
  modern standards strive to provide enlarged standard library for
  developing program quickly and easily. In this work, we present
  vcfpp, a C++ API of htslib, providing a rapid and intuitive
  interface to manipulate VCF/BCF files safely and as easily as
  writing python script. We demonstrate an example of how minimal
  vcfpp code can read/write variant records rapidly. Additionally, we
  demonstrate how vcfpp can be useful to Statisticians analyzing
  genetic variants in R. In the benchmarking, a simple R script using
  vcfpp API shows lower memory footprint and fast speed than scripts
  using vcfR and cyvcf2. Command line tool using vcfpp is available
  for performaning PBWT-based analysis using large-scale reference
  panel stored in compressed BCF format.
\end{titlepage}
#+end_export

* Introduction

The VCF format [cite:@danecek2011] is the standard for
representing genetic variation observed in DNA sequencing
studies. The strength of the VCF format is its ability to represent
the location of a variant, the genotype of the sequenced
individual at each locus, as well as extensive variant
metadata. Furthermore, the VCF format provided a substantial advance
for the research community, as it follows a rigorous format
specification that enables direct comparison of results from
multiple studies and facilitates reproducible research. However, the
consequence of this flexibility and the rather complicated
specification of the VCF format, is that researchers require
powerful software libraries to access, query and manipulate variants
from VCF files.

\newpage

* Results

** Features

vcfpp is implemented as a single header file for being easily
intergrated and compiled. There are four core classes for
manipulating VCF/BCF as showed in [[tb:class]].

#+caption: vcfpp capabilities and implemented C++ class
#+name: tb:class
|---------------------------------+-----------|
| Capability                      | Class     |
|---------------------------------+-----------|
| VCF/BCF read                    | BcfReader |
| VCF/BCF write                   | BcfWriter |
| VCF/BCF variants and operations | BcfRecord |
| VCF/BCF header and operations   | BcfHeader |
|---------------------------------+-----------|

** Python-like API

In this example, we count the number of heterozygous sites for
each sample in all records. The core is *just 10 lines*.

#+caption: Counting heterozygous genotypes per sample on chr21
#+attr_latex: :options captionpos=t
#+begin_src C++ -n
vcfpp::BcfReader vcf("bcf.gz", "id1,id2,id3", "chr21"); 
vcfpp::BcfRecord var(vcf.header); 
vector<char> gt; // genotype can be of bool, char or int type
vector<int> hetsum(vcf.nsamples, 0); // store the het counts
while(vcf.getNextVariant(var)){
  var.getGenotypes(gt);
  if(!var.isSNP()||!var.isNoneMissing()||var.QUAL()<9) continue; 
  assert(var.ploidy()==2); // make sure it is diploidy
  for(int i=0; i<gt.size()/2; i++) 
    hetsum[i] += abs(gt[2*i+0] - gt[2*i+1]);
}
#+end_src

\newpage

** Working with R

Stats like working with R. Rcpp can interact R and C++ seamlessly.

#+caption: vcfpp-r.cpp
#+attr_latex: :options captionpos=t
#+begin_src C++
#include <Rcpp.h>
#include <vcfpp.h>
using namespace Rcpp;
using namespace std;
// [[Rcpp::export]]
List genotypes(string vcffile) {
    vcfpp::BcfReader vcf(vcffile);
    vcfpp::BcfRecord var(vcf.header);
    vector<vector<bool>> G;
    vector<bool> gt;
    while (vcf.getNextVariant(var)) {
        var.getGenotypes(gt);
        if (!var.isNoneMissing()) continue; 
        G.push_back(gt);
    }
    return wrap(G);
}
#+end_src

#+caption: The R code compiles and calls the above C++ code
#+attr_latex: :options captionpos=t
#+begin_src R
library(Rcpp)
sourceCpp("vcfpp-r.cpp")
gts <- genotypes("vcf.gz")
#+end_src

** Benchmarking

vcfR [cite:@brian2017] is an R package that provides function to parse vcf into data tables in R.

#+caption: Performance of counting heterozygous genotypes per sample in the 1000 Genome Project for chromosome 21. (*) used by /sourceCpp/ function.
#+attr_latex: :align lllll :placement [H]
|------------------+----------+-------+-------------|
| API              | Time (s) | Ratio |    RAM (Gb) |
|------------------+----------+-------+-------------|
| vcfpp::BcfReader |   115+3* |   1.0 | 0.071+0.28* |
| cyvcf2.VCF       |      209 |   1.8 |       0.035 |
| vcfR::read.vcfR  |     7207 |  61.1 |          97 |
|------------------+----------+-------+-------------|

#+caption: Performance of converting the gzipped VCF of 1000 Genome Project into data tables of R for chromosome 21.
#+attr_latex: :align lllll :placement [H]
|-------------------+----------+-------+----------|
| API               | Time (s) | Ratio | RAM (Gb) |
|-------------------+----------+-------+----------|
| vcfpp::BcfReader  |      218 |   1.0 |       25 |
| vcfR::read.vcfR   |      577 |   2.6 |       48 |
| data.table::fread |      155 |   0.7 |       38 |
|-------------------+----------+-------+----------|


#+print_bibliography:

* Local setup :noexport:
Local Variables:
org-latex-listings: t
End:
