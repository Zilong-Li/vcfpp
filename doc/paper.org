#+title: vcfpp: a C++ API for rapid processing of the Variant Call Format
#+setupfile: latex.org
#+language: en
#+startup: show2levels indent hidestars hideblocks
#+options: title:nil toc:nil H:4 author:nil num:nil date:nil
#+bibliography: "ref.bib"

#+begin_export latex
\author{Zilong Li
\thanks{Zilong Li: Section for Computational and RNA Biology, Department of Biology, University of Copenhagen. \\
Email: zilong.dk@gamil.com.}}
\begin{titlepage} \maketitle
  \begin{abstract}
    Given the complexity and popularity of the VCF/BCF format as well
    as ever-growing data size, there is always a need for fast and
    flexible methods to manipulate it in different programming
    languages. Many bioinformatics tools developed in C++ for high
    performance, and modern C++ standards strive to provide growing
    standard library for developing program easily. This work presents
    \textit{vcfpp}, a C++ API of htslib in a single file, providing an
    intuitive interface to manipulate VCF/BCF files rapidly and
    safely, as well as being portable. Additionally, this work
    introduces the \textit{vcfppR} package to demonstrate the usage of
    developing high performance R package with \textit{vcfpp}
    seamlessly and esaily for analyzing and visualizing genomic
    variations, such as characterizing the variations in the VCF. In
    the Benchmarking,the dynamic scripts using vcfppR::vcfreader and
    cyvcf2::VCF are $1.3\times$, $1.9\times$ slower than the compiled
    C++ code respectively when streaming variant analysis using little
    memory. Also, in a two-step setting where the whole VCF content is
    loaded first, the \textit{vcfppR} shows $110\times$ speed
    improvement over the \textit{vcfR} package in processing
    genotypes.
  \end{abstract}
\end{titlepage}
#+end_export

* Introduction

Many efforts have been contributed by computational biologists for
making analyses with genomics variants no pain. The variants are
typically stored in the variant call format (VCF), which becomes the
standard for representing genetic variation information with
complicated specification [cite:@danecek2011]. Later on, as the
ever-growing data size, the binary variant call format (BCF) is
designed to query and store big data sets efficiently. The C API of
htslib provide the full functionalities to manipulate the VCF and
BCF format for both compressed and uncompressed files. As the C API
is hard to use for in-proficient programmers, API of other languages
are invented. Existing popular libraries include
vcfR[cite:@brian2017] for R, cyvcf2 [cite:@pedersen2017a] for
Python, hts-nim [cite:@pedersen2018] for Nim and vcflib
[cite:@garrison2022] for C++. All are valuable for corresponding
community but not perfect. In particular, vcflib is both an API and
a large collection of command line tools, with the primary
disadvantage being not supporting the BCF. It is noteworthy that
many methods written in C++ designed for large sample size can not
even input the compressed VCF or BCF such as Syllbable-PBWT
[cite:@wang2023]. The motivation of vcfpp is to offer full
functionalities as htslib, and provide simple and safe API in a
single header file, which can be easily integrated for writing
program quickly in C++ as well as other languages that can call
C/C++ codes such as R and Python.

* Methods 

The vcfpp is implemented as a single header file for being easily
integrated and compiled. There are four core classes for manipulating
the uncompressed and compressed VCF/BCF as summarized in Table
[[tb:class]].

#+caption: vcfpp capabilities and implemented C++ class
#+name: tb:class
|---------------------------------+-----------|
| Capability                      | Class     |
|---------------------------------+-----------|
| VCF/BCF read                    | BcfReader |
| VCF/BCF write                   | BcfWriter |
| VCF/BCF variants and operations | BcfRecord |
| VCF/BCF header and operations   | BcfHeader |
|---------------------------------+-----------|

* Results

To demonstrate the simplicity and performance of vcfpp, the
following sections illustrate commonly used features of vcfpp and
highlight the vcfppR package as an example of vcfpp working with R.

** C++ API

In the Listing [[list1]], we count the number of heterozygous sites
for each sample across all records. The following code first
includes a single /vcfpp.h/ file (line 1), opens a compressed BCF
file constrained to 3 samples and region "chr21" (line 2), and
creates a variant record associated with the header information in
the BCF (line 3). Then it defines several types of objects to
collect the results we want (line 4-5). Taking advantage of
generic templates in C++, the type of field like genotype can be
very flexible regarding memory consumption. Then it starts
iterating over the BCF file and processes each variant record in
the loop (line 6). We ignore variants of other types (INDEL, SV),
or with /FILTER/ not being "PASS", or with /QUAL/ value smaller than 9
(line 8-9), while we can also do more complicated filterings using
the API. Finally, we count the number of heterozygous variant for
each diploid sample (line 10-11). The core is just 12 lines.

#+name: list1
#+caption: Counting the number of heterozygous genotypes for 3 samples on chr21
#+attr_latex: :options captionpos=t
#+begin_src C++ -n
#include <vcfpp.h>
vcfpp::BcfReader vcf("bcf.gz", "chr21", "id1,id2,id3"); 
vcfpp::BcfRecord var(vcf.header); // create a variant object
vector<int> gt; // genotype can be bool, char or int type
vector<int> hets(vcf.nsamples, 0); // store the het counts
while(vcf.getNextVariant(var)){
  var.getGenotypes(gt);
  if(!var.isSNP()||var.QUAL()<9||var.FILTER()!="PASS")continue; 
  assert(var.ploidy()==2); // make sure it is diploidy
  for(int i=0; i<vcf.nsamples; i++) 
    hets[i] += abs(gt[2*i+0] - gt[2*i+1])==1;
}
#+end_src

\newpage

** Working with R

While vcfpp is very simple for writing a C++ program, a single C++
header file can be easily integrated into popular script languages
like R and Python. Paticularly, R is made for statistical modeling
and visualization, which is widely used for data
analyses. Therefore, I develop the vcfppR package to demonstrate
how vcfpp can work with R seamlessly using Rcpp
[cite:@eddelbuettel2011]. For instance, with the basic knowledge
of C++ and Rcpp, we can turn the C++ code in Listing [[list1]] into
the Rcpp function to return a list of the number heterzygous sites
per sample along with the sample's name (Listing [[list2]]), which can
be compiled and called dynamically in R using /sourceCpp/ (Listing
[[list3]]). As such, we can further proccess and visualize the results
efficiently in R, such as run the analyses by region in parallel
with the /parallel/ package, stratifying the results by populations
given external labels of each sample and visualizing them in R.

#+name: list2
#+caption: vcfpp-hets.cpp
#+attr_latex: :options captionpos=t
#+begin_src C++
#include <Rcpp.h>
#include <vcfpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
List heterozygosity(std::string vcffile,
                    std::string region,
                    std::string samples) {
  vcfpp::BcfReader vcf(vcffile, region, samples); 
  // here copy the lines 3-12 in listing 1.
  return List::create(Named("samples")=vcf.header.getSamples(),
                      Named("hets")=hets);
}
#+end_src

#+name: list3
#+caption: The R code compiles and calls the vcfpp-hets.cpp dynamically
#+attr_latex: :options captionpos=t
#+begin_src R
library(Rcpp)
sourceCpp("vcfpp-hets.cpp")
heterozygosity("bcf.gz", "chr21", "id1,id2,id3");
#+end_src

** The vcfppR package

The vcfppR package is developed and powered by the vcfpp API. For
parsing the VCF in R, the /vcfreader/ and /vcftable/ functions can
read contents of the VCF into the R data type rapidly with fine
control of the region, the samples, the variant types, the FORMAT
column and the filters. For instance, the code in Listing [[list4]]
parses the read depth per variant (DP) in the raw called VCF by
the 1000 Genomes Project through the URL link, restricting to 3
samples with variants in "chr21:1-10000000" region of SNP type and
passing FILTER, as well as discarding the INFO column in the
returned list. Consequently, the visual summarization is done by
using /boxplot/ in R (see Figure [[fig1]]).

#+name: list4
#+caption: Example of vcftable
#+attr_latex: :options captionpos=t
#+begin_src R
library(vcfppR)
vcffile <- "https://url-path"
vcf <- vcftable(vcffile, region="chr21:1-10000000", samples="NA12878,HG00118,HG00119", format="DP", vartype="snps", pass = TRUE, info = FALSE)
boxplot(vcf$DP, names=vcf$samples, ylab="Read Depth (DP)")
#+end_src

Furthermore, as characterization of the variations is an essential
task in understanding the genome, I showcase the /vcfsummary/
function in Figure [[fig1]] in summarizing the variations in the
latest VCF released by the 1000 Genome Project
[cite:@byrska-bishop2022].

#+name: fig1
#+caption: Characterizing the variations in the 1000 Genome Project using the vcfppR package (see code in supplementary).
[[file:fig1.png]]

** Benchmarking

In addition to simplicity and portability, I showcase the
performance of vcfpp and vcfppR. In the benchmarking, I developed
scripts (https://github.com/Zilong-Li/vcfpp/tree/main/scripts) to
perform a common analysis, that is counting heterozygous genotypes
per sample, which were done on a Linux server with AMD EPYC 7643
48-Core Processor. As shown in Table [[tb:counthets]], with the
gzipped VCF of 3202 samples and 1002753 variants as input, the
compiled code vcfppR::heterozygosity, which is the Rcpp function
in Listing [[list2]], has the similar performance as the compiled C++
code of vcfpp.h in Listing [[list1]]. And the dynamic scripts using
vcfppR::vcfreader and cyvcf2::VCF are $1.3\times$, $1.9\times$
slower than the compiled C++ code respectively. In the streaming
setting, all scripts use little RAM for only loading one variant into
memory. However, R packages like vcfR and data.table usually load
all tabular data into memory first and perform analyses later,
which is refered as the two-step strategy. Additionaly, I develop
/vcftable/ function in vcfppR to load whole VCF content in R for
such two-step comparison. Notably, the vcfppR::vcftable is only
$2.0\times$ slower compared to $19\times$, $119\times$ slower
for vcfR::read.vcfR and data.table::fread respectively. This is
because genotype values returned by both vcfR and data.table are
characters, which are very slow to be further processed in R. In
contrast, with vcfppR, integer matrix of genotypes can be returned
to R directly for fast computation. Importantly, vcfpp and vcfppR
offer users the full functionalities of htslib, such as supporting
the compressed VCF/BCF, selecting samples, regions and variant
types.

#+caption: Performance of counting heterozygous genotypes per sample in the 1000 Genome Project for chromosome 21. (*) used by loading data in two-step strategy.
#+name: tb:counthets
#+attr_latex: :align lllllll :placement [H]
|------------------------+------------+-------+----------+-----------|
| API/Function           |   Time (s) | Ratio | RAM (Gb) | Strategy  |
|------------------------+------------+-------+----------+-----------|
| vcfpp::BcfReader       |         97 |   1.0 |    0.006 | streaming |
| vcfppR::heterozygosity |        109 |   1.1 |    0.074 | streaming |
| vcfppR::vcfreader      |        150 |   1.3 |    0.136 | streaming |
| cyvcf2::VCF            |        212 |   1.9 |    0.036 | streaming |
| vcfppR::vcftable       |    206*+12 |   2.0 |     64.7 | two-step  |
| vcfR::read.vcfR        |  625*+1219 |  19.0 |     97.5 | two-step  |
| data.table::fread      | 313*+12301 |   130 |     77.3 | two-step  |
|------------------------+------------+-------+----------+-----------|

* Discussion

I have developed vcfpp, a fast and flexible C++ API for
high-performance genetic variant analyses with the VCF/BCF
input. Its simplicity and portability can be very useful for both
developing packages and writing daily used scripts. The vcfppR
package is a great example of vcfpp working with R. There are
/vcfreader/ and /vcftable/ functions that can process the variants in
vcfppR. The /vcftable/ is designed for reading the VCF into tabular
data structure in R, but it can only read a single FORMAT item in
one pass over the VCF. In contrast, the /vcfreader/ can be used to
parse the variants iteratively, and the users can decide the
information to retrieve for each variant. As such, many packages
written in C++ using customized VCF parser can be simply replaced
with vcfpp to offer more functionalities. For instance, imputation
software STITCH [cite:@davies2016] and QUILT [cite:@davies2021] are
using vcfpp to parse large reference panel in the compressed
VCF/BCF.

* Software and Code

The latest release of vcfpp.h and documentation can be found at
https://github.com/Zilong-Li/vcfpp. Scripts for Benchmarking can be
found at https://github.com/Zilong-Li/vcfpp/tree/main/scripts. The
vcfppR package is available at https://github.com/Zilong-Li/vcfppR.

* Acknowledgments

I would like to thank Anders Albrechtsen at Copenhagen University
and Robert W Davies at Oxford University for helpful comments. They
are Statisticians as well as R enthusiast working on genetics, whom
I work with and learn a lot from.

* Funding

This work is supported by the Novo Nordisk 462 Foundation
(NNF20OC0061343).

#+print_bibliography:
\newpage
\appendix

* Supplementary

#+caption: R code produces Figure 1. vcffiles (not shown) are url links.
#+attr_latex: :options captionpos=t
#+begin_src R
library(vcfppR)
par(mfrow=c(1,3)) ## layout in plots
vcf <- vcftable(vcffile, region="chr21:1-10000000", samples="NA12878,HG00118,HG00119", format="DP", vartype="snps", pass = TRUE, info = FALSE)
boxplot(vcf$DP, names=vcf$samples, ylab="Read Depth (DP)")
svfile <- "https://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data_collections/1000G_2504_high_coverage/working/20210124.SV_Illumina_Integration/1KGP_3202.gatksv_svtools_novelins.freeze_V3.wAF.vcf.gz"
sv <- vcfsummary(svfile, svtype = TRUE)
boxplot(sv[c("DEL","DUP", "CNV", "INS","INV","CPX","CTX")],
        main = "SVs per Genome stratified by SV types")
ped <- read.table("https://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data_collections/1000G_2504_high_coverage/20130606_g1k_3202_samples_ped_population.txt", h=T)
ped <- ped[order(ped$Superpopulation),]
supers <- unique(ped$Superpopulation)
all <- parallel::mclapply(vcffiles, vcfsummary, pass = TRUE, mc.cores=23)
samples <- all[[1]]$samples
snps <- Reduce("+", lapply(all, "[[", "SNP"))
indels <- Reduce("+", lapply(all, "[[", "INDEL"))
o <- sapply(supers, function(pop) {
  id <- subset(ped, Superpopulation == pop)[,"SampleID"]
  ord <- match(id, samples)
  (snps[ord] + indels[ord]) / 1e6
})
boxplot(o, main = "SNP & INDEL with FILTER=PASS", ylab = "Number of variants per genome (in millions)")
#+end_src

* Local setup :noexport:
Local Variables:
org-latex-listings: t
End:
